# Create a new directory and enter it
function mkcd() {
    mkdir -p "$@" && cd "$_"
}

# Copy absolute path of file to clipboard
function abspath() {
    realpath "$@" | tr -d '\n' | pbcopy
}

# Determine size of a file or total size of a directory
function fs() {
    if du -b /dev/null >/dev/null 2>&1; then
        local arg=-sbh
    else
        local arg=-sh
    fi
    if [[ -n "$@" ]]; then
        du $arg -- "$@"
    else
        du $arg .[^.]* ./*
    fi
}

# Git Clone to ~/repos directory
function clone() {
    if [[ -z "${VAR}" ]]; then
        pushd $REPOS_PATH
        git clone -v --progress --recurse-submodules --shallow-submodules $1
        popd
    else
        echo "could not file repos path"
    fi
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
    tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX
}

# follow symbolic links if needed
function where() {
    which "$@" | xargs ls -l
}

# cheatsheet update. See github.com/yairfine/cheatsheet
function csu {
    # update cheatsheet script
    pushd $REPOS_PATH/cheatsheet
    TEMPFILE=$(mktemp)
    git pull 2>&1 | tee $TEMPFILE
    grep -i -e "Already up to date." -e "fatal: Could not read from remote repository" $TEMPFILE &>/dev/null || sudo ./install.sh
    rm $TEMPFILE
    popd

    # update the cheatsheet
    setopt null_glob # https://zsh.sourceforge.io/Doc/Release/Options.html#index-NULLGLOB
    for dir in $REPOS_PATH/*-cheatsheet; do
        pushd $dir
        git pull
        cs -i .
        popd
    done
}

function update {
    # update cheatsheet script
    pushd $DOT_FILES_DIR
    TEMPFILE=$(mktemp)
    git pull --ff-only --recurse-submodules 2>&1 | tee $TEMPFILE
    grep -i -e "Already up to date." -e "fatal" -e "aborting" -e "You are not currently on a branch" $TEMPFILE &>/dev/null || ./setup.sh
    rm $TEMPFILE
    popd
}

# ssh-add all keys
function ssha {
    eval "$(ssh-agent -s)"

    pushd "$HOME/.ssh"

    for file in *.pub; do
        [ -f "$file" ] || break
        key="$(basename $file .pub)"
        ssh-add $key
    done

    popd
}

function destroy() {
    if [ $# -eq 0 ]; then
        echo "Missing input file"
        return 1
    fi

    if [[ -f $1 ]]; then
        SIZE_BYTES=$(stat -f "%z" $1)
        chmod u+w $1
        dd if=/dev/urandom of=$1 bs=1 seek=0 count=$SIZE_BYTES conv=notrunc
        rm -v -i $1
    else
        echo "file '$1' not exists"
        return 1
    fi
}

function link_repos_here() {
    for repo in "$@"; do
        if [ -d "$REPOS_PATH/$repo" ]; then
            ln -s -v "$REPOS_PATH/$repo" .
        else
            echo "$repo not found"
        fi
    done
}
