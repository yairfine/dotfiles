# [user]
# 	name = "add with git-setup-identity.sh"
# 	email = "add with git-setup-identity.sh"
[core]
    pager = command -v delta >/dev/null 2>&1 && delta || less
    editor = code --wait
    autocrlf = input
    excludesfile = ~/.gitignore_global
[color]
    ui = auto
[init]
    defaultBranch = master
[pull]
    rebase = false
[diff]
    tool = vscode
    colorMoved = default
[merge]
    tool = vscode
    conflictstyle = diff3
[sequence]
    editor = interactive-rebase-tool
[delta]
    navigate = true

# remember how youâ€™ve resolved a hunk conflict so that the next time it sees
# the same conflict, Git can automatically resolve it for you
[rerere]  # reuse recorded resolution
    enabled = true
[column]
    branch = auto
    tag = auto

[http]
    sslVerify = false
[filter "lfs"]
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
    required = true

[difftool "sourcetree"]
    cmd = opendiff \"$LOCAL\" \"$REMOTE\"
    path = 
[difftool "vscode"]
    cmd = code --wait --diff $LOCAL $REMOTE
[mergetool "sourcetree"]
    cmd = /Applications/Sourcetree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
    trustExitCode = true
[mergetool "bc3"]
    trustExitCode = true
[mergetool "vscode"]
    cmd = code --wait $MERGED

[pretty]
    twolines = format: %C(auto)%h%C(reset)%C(auto)%d%C(reset) %C(white)%s%C(reset)  %C(dim white)%an%C(reset) %n
    threelines = format: %C(auto)%h%C(reset)%C(auto)%d%C(reset) %n %C(white)%s%C(reset)  %C(dim white)%an%C(reset) %n

[alias]
    s = status --short
    sb = status --short --branch
    st = status
    cm = commit
    co = checkout
    br = branch
    brs = branch --sort=-committerdate
    cl = clone --verbose --progress --recurse-submodules --shallow-submodules
    chp = cherry-pick
    grep = grep --line-number
    ir = rebase --interactive --rebase-merges --autosquash

    conf = config --global --edit # edit global config (this file)
    gl = config --global --list
    alias = config --get-regexp '^alias'
    last = log -1 HEAD --stat
    graph = log --graph --oneline --decorate --branches --remotes --tags
    amend = commit --amend
    pushf = push --force-with-lease
    unstage = restore --staged --progress
    first-push = push -u origin HEAD
    reseth = reset --hard "@{upstream}"  # note: the escaping "" is for powershell environment
    pruning = ! git fetch origin --prune && git gc && git prune && git prune-packed
    purge = ! git clean -xfd && git submodule foreach --recursive git clean -xfd && git reset --hard && git submodule foreach --recursive git reset --hard && git submodule update --init --recursive
    subpurge = ! git submodule foreach --recursive git clean -xfd && git submodule foreach --recursive git reset --hard && git submodule update --init --recursive
    cleanlfs = lfs prune
    diffbase = diff $1...$2 
    cop = "!checkout_and_pull() { git checkout $* && git pull; }; checkout_and_pull"
    cotag = "!checkout_tag() { if [[ $(git tag --list | grep -i $1 | wc -l) -eq 1 ]]; then git tag --list | grep -i $1 | xargs -I {} sh -c 'echo {}; git checkout {}' ; else echo 'Invalid tag[s]:'; git tag --list | grep -i $1; fi }; checkout_tag"
    softmerge = ! git merge $1 --no-ff --no-commit
    pushtags = ! git push origin $(git symbolic-ref --short HEAD) --tags
    # can use `git format` with `--staged` and/or `--function-context` flags
    format = "!format_diff() { git diff -U0 --no-color --relative $* | clang-format-diff.py -p1 -v -i; }; format_diff"
    id = ! git config user.name && git config user.email
    tree = ls-tree -r
    unpack-objs = ! mv .git/objects/pack/pack-*.pack . && cat pack-*.pack | git unpack-objects -r && rm pack-*.pack
    find-merge = "!sh -c 'commit=$0 && branch=${1:-HEAD} && (git rev-list $commit..$branch --ancestry-path | cat -n; git rev-list $commit..$branch --first-parent | cat -n) | sort -k2 -s | uniq -f1 -d | sort -n | tail -1 | cut -f2'"
    show-merge = "!sh -c 'merge=$(git find-merge $0 $1) && [ -n \"$merge\" ] && git show $merge'"
