# Create a new directory and enter it
function mkcd() {
    mkdir -p "$@" && cd "$_"
}

# Copy absolute path of file to clipboard
function abspath() {
    absp=$(realpath "$@" | tr -d '\n')
    echo $absp
    echo $absp | pbcopy
}

# Determine size of a file or total size of a directory
function fs() {
    if du -b /dev/null >/dev/null 2>&1; then
        local arg=-sbh
    else
        local arg=-sh
    fi
    if [[ -n "$@" ]]; then
        du $arg -- "$@"
    else
        du $arg .[^.]* ./*
    fi
}

# Git Clone to ~/repos directory
function clone() {
    if [[ -z "${VAR}" ]]; then
        pushd $REPOS_PATH
        git clone -v --progress --recurse-submodules --shallow-submodules $1
        popd
    else
        echo "could not file repos path"
    fi
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
    tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX
}

# follow symbolic links if needed
function where() {
    which "$@" | xargs ls -l
}

# cheatsheet update. See github.com/yairfine/cheatsheet
function csu {
    # update cheatsheet script
    pushd $REPOS_PATH/cheatsheet
    TEMPFILE=$(mktemp)
    git pull 2>&1 | tee $TEMPFILE
    grep -i -e "Already up to date." -e "fatal: Could not read from remote repository" $TEMPFILE &>/dev/null || sudo ./install.sh
    rm $TEMPFILE
    popd

    # update the cheatsheet
    setopt null_glob # https://zsh.sourceforge.io/Doc/Release/Options.html#index-NULLGLOB
    for dir in $REPOS_PATH/*-cheatsheet; do
        pushd $dir
        git pull
        cs -i .
        popd
    done
}

function update {
    # update dotfiles
    pushd "$REPOS_PATH/dotfiles/"
    git pull --rebase --recurse-submodules
    popd
}

# ssh-add all keys
function ssha {
    pushd "$HOME/.ssh"

    for file in *.pub; do
        [ -f "$file" ] || break
        key="$(basename $file .pub)"
        ssh-add $key
    done

    popd
}

# dd bytes with semi optimal block size. See alias ddfr ddfz ddfo
function ddbf() {
    if [[ $# -ne 3 ]]; then
        echo "usage: ddb  <input stream> <size in bytes> <output file>"
        return 1
    else
        STREAM=$1
        SIZE=$2
        OUTPUT=$3
    fi

    if [ ! -f $OUTPUT ]; then
        touch $OUTPUT
    fi

    if command -v getconf &>/dev/null; then
        BS=$(getconf PAGE_SIZE)
    else
        BS="4k"
    fi

    COUNT=$((SIZE / BS))
    TOTAL_FIRST=$((COUNT * BS))
    REMINDER=$((SIZE - TOTAL_FIRST))

    echo "writing $BS * $COUNT and then another $REMINDER"

    if [[ $COUNT -eq 0 ]]; then
        dd if=$STREAM of=$OUTPUT seek=0 bs=1 count=$SIZE
        return 0
    fi

    dd if=$STREAM of=$OUTPUT seek=0 bs=$BS count=$COUNT
    dd if=$STREAM of=$OUTPUT seek=$TOTAL_FIRST bs=1 count=$REMINDER
}

function destroy() {
    if [ $# -eq 0 ]; then
        echo "Missing input file"
        return 1
    fi

    for filename in "$@"; do
        if [[ -f $filename ]]; then
            SIZE_BYTES=$(stat -f "%z" $filename)
            chmod u+w $filename
            for run in {1..2}; do
                ddfr $SIZE_BYTES $filename
            done
            rm -v -i $filename
        else
            echo "file '$filename' not exists"
        fi
    done
}

function link_repos_here() {
    for repo in "$@"; do
        if [ -d "$REPOS_PATH/$repo" ]; then
            ln -s -v "$REPOS_PATH/$repo" .
        else
            echo "$repo not found"
        fi
    done
}
